@namespace("org.ga4gh.models")

/**
Defines types used by the GA4GH References API.

References API servers may implement either or both of two modes: "classic", in
which all `Reference`s annotate simple linear strings, and "graph", in which
`Reference`s annotate `Sequence`s in sequence graphs. The "graph" mode is to be
preferred in new client and server implementations.
*/
protocol References {

import idl "common.avdl";

/**
A `Reference` is a canonical assembled contig, intended to act as a
reference coordinate space for other genomic annotations. A single
`Reference` might represent the human chromosome 1, for instance.

`Reference`s are designed to be immutable. When extending a `ReferenceSet` with
new `Reference`s, the existing `References` should not be changed. Newly added
`Reference` `Sequence`s may be children of existing `Reference` `Sequence`s, but
existing `Reference` `Sequence`s should not be made to be children of newly
added `Reference` `Sequence`s.

*/
record Reference {

  /**
  The reference ID. Unique within the repository.
  */
  string id;

  /**
  The ID of the `Sequence` on which this `Reference` occurs. May not be null,
  although it may happen to be the same as the ID of the `Reference`.

  The actual `Sequence` bases for a `Reference` are available through the
  `getSequenceBases()` API call on this `Reference`'s `Sequence`.

  Multiple `Reference`s on the same `Sequence` may not overlap.
  */
  string sequenceId;

  /**
  The 0-based inclusive offset from the left end of the `Sequence` at which the
  `Reference` begins. This will be 0 unless the `Sequence` contains bases at the
  left not included in the `Reference`.
  */
  long start;

  /**
  The number of bases in this `Reference`. This will be the length of the
  `Reference`'s `Sequence` unless the `Sequence` has some bases at one or both
  ends not included in the `Reference`.
  */
  long length;

  /**
  The MD5 checksum uniquely representing this `Reference` as a lower-case
  hexadecimal string, calculated as the MD5 of the upper-case sequence
  excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).
  */
  string md5checksum;

  /**
  The name of this reference. (e.g. '22').
  */
  string name;

  /**
  The URI from which the sequence was obtained.
  Specifies a FASTA format file/string with one name, sequence pair.
  In most cases, clients should call the `getSequenceBases()` or
  `getReferenceBases()` methods to obtain sequence bases for a `Reference`
  instead of attempting to retrieve this URI.
  */
  union { null, string } sourceURI = null;

  /**
  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
  with a version number, e.g. `GCF_000001405.26`.
  */
  array<string> sourceAccessions;

  /**
  A sequence X is said to be derived from source sequence Y, if X and Y
  are of the same length and the per-base sequence divergence at A/C/G/T bases
  is sufficiently small. Two sequences derived from the same official
  sequence share the same coordinates and annotations, and
  can be replaced with the official sequence for certain use cases.
  */
  boolean isDerived = false;

  /**
  The `sourceDivergence` is the fraction of non-indel bases that do not match the
  reference this record was derived from.
  */
  union { null, float } sourceDivergence = null;

  /** ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human). */
  union { null, int } ncbiTaxonId = null;

  /** whether this reference is primary, part of the core coordinate system, or not */
  boolean isPrimary = true;
}

/**
A `ReferenceSet` is a set of `Reference`s which typically comprise a
reference assembly, such as `GRCh38`. A `ReferenceSet` defines a common
coordinate space for comparing reference-aligned experimental data.

`ReferenceSet`s are composeable: a `ReferenceSet` may incorporate all of the
`Reference`s and `Join`s from one or more other `ReferenceSet`s via the
`includedReferenceSet`s array.

In classic mode, this is just a set of sequences.  In graph mode, there
are both sequences and joins, but we only access the joins via method
getReferenceJoins().
*/

record ReferenceSet {
  /** The reference set ID. Unique in the repository. */
  string id;

  /**
  The IDs of the `Reference` objects that are part of this set.

  This field should be left null if the set contains a very large number of
  `Reference`s. The `Reference`s in the set may also be obtained through a
  `searchReferences()` API call.
  */
  union { null, array<string> } referenceIds = null;

  /**
  The IDs of `ReferenceSet`s that are included in this set, allowing extension
  from a core e.g. provided by GRC or another provider.  In particular this
  may provide a basis of primary references for a graph mode reference set.

  A `ReferenceSet` is not allowed to include itself, either directly by ID, or
  indirectly or transitively through another `ReferenceSet`.

  `Reference`s and `Join`s from the included `ReferenceSet`s are considered to
  be part of this one. If multiple included `ReferenceSet`s provide a
  `Reference` or `Join`, only one copy is taken to exist in this `ReferenceSet`.
  Since different `Reference`s on a `Sequence` may not overlap, it is illegal to
  include `ReferenceSet`s which when taken together would create such an
  overlap, or to have such an overlap between a `Reference` from an included
  `ReferenceSet` and one that appears directly in this `ReferenceSet`.
  */
  array<string> includedReferenceSets = [];

  /**
  Order-independent MD5 checksum which identifies this `ReferenceSet`.

  To compute this checksum, make a list of `Reference.md5checksum` for all
  `Reference`s in this set, including any in any included set. Add to that list
  a lower-case MD5 checksum for each `Join` in the `ReferenceSet` or any
  included set, which is calculated by hashing the `md5checksum`, position as a
  decimal string, and strand as "+" or "-" for the two `Side`s of the `Join`
  in order. Then sort that list, and take the MD5 hash of all the strings
  concatenated together. Express the hash as a lower-case hexadecimal string.
  */
  string md5checksum;

  /**
  ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human) indicating
  the species which this assembly is intended to model. Note that contained
  `Reference`s may specify a different `ncbiTaxonId`, as assemblies may
  contain reference `Sequence`s which do not belong to the modeled species, e.g.
  EBV in a human reference genome.
  */
  union { null, int } ncbiTaxonId = null;

  /** Optional free text description of this reference set. */
  union { null, string } description = null;

  // next information about the source of the `Sequence`s

  /** Public id of this reference set, such as `GRCh37`. */
  union { null, string } assemblyId = null;

  /** Specifies a FASTA format file/string. */
  union { null, string } sourceURI = null;

  /**
  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
  with a version number, e.g. `NC_000001.11`.
  */
  array<string> sourceAccessions;

  /**
  A reference set may be derived from a source if it contains
  additional `Sequence`s, or some of the `Sequence`s within it are derived
  (see the definition of `isDerived` in `Reference`).
  */
  boolean isDerived = false;
}

}
